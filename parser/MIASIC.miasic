# token array format:
# - token type
# - token value

ALIAS TOKEN_TY AS I32;

CONST TK_INVALID AS TOKEN_TY = 0;
CONST TK_KW AS TOKEN_TY = 1;
CONST TK_EQ AS TOKEN_TY = 2;
CONST TK_LPAREN AS TOKEN_TY = 3;
CONST TK_RPAREN AS TOKEN_TY = 4;
CONST TK_LBRACK AS TOKEN_TY = 5;
CONST TK_RBRACK AS TOKEN_TY = 6;
CONST TK_COMMA AS TOKEN_TY = 7;
CONST TK_SEMICOLON AS TOKEN_TY = 8;
CONST TK_LIT_INT AS TOKEN_TY = 9;
CONST TK_LIT_FLT AS TOKEN_TY = 10;
CONST TK_LIT_BOOL AS TOKEN_TY = 11;
CONST TK_LIT_STR AS TOKEN_TY = 12;
CONST TK_IDENT AS TOKEN_TY = 13;

STRUCT TOKEN HAS
    type AS TOKEN_TY
END;

STRUCT STR_TOKEN IS TOKEN HAS
    value AS STR
END;

ALIAS KW_TOKEN AS STR_TOKEN;
ALIAS IDENT_TOKEN AS STR_TOKEN;

STRUCT INT_TOKEN IS TOKEN HAS
    value AS I32
END;

STRUCT FLT_TOKEN IS TOKEN HAS
    value AS F32
END;

STRUCT BOOL_TOKEN IS TOKEN HAS
    value AS BOOL
END;

INIT TOKEN TAKES type AS TOKEN_TY BEGIN
    SELF.type = type;
END

INIT STR_TOKEN TAKES type AS TOKEN_TY, s AS STR BEGIN
    (SELF.SUPER.INIT type);
    SELF.value = s;
END

INIT KW_TOKEN TAKES s AS STR BEGIN
    (SELF.ALIAS.INIT TK_KW, s);
END

INIT IDENT_TOKEN TAKES s AS STR BEGIN
    (SELF.ALIAS.INIT TK_IDENT, s);
END

INIT INT_TOKEN TAKES i AS I32 BEGIN
    (SELF.SUPER.INIT TK_LIT_INT);
    SELF.value = i;
END

INIT FLT_TOKEN TAKES f AS F32 BEGIN
    (SELF.SUPER.INIT TK_LIT_FLT);
    SELF.value = f;
END

INIT BOOL_TOKEN TAKES b AS BOOL BEGIN
    (SELF.SUPER.INIT TK_LIT_BOOL);
    SELF.value = b;
END

ANY TOKEN_ OF
    TOKEN,
    STR_TOKEN,
    KW_TOKEN,
    IDENT_TOKEN,
    INT_TOKEN,
    FLT_TOKEN,
    BOOL_TOKEN
END;

VAR filename AS STR = (ARG 1);
VAR source AS STR = (READFILESTR filename, -1);
VAR idx AS I32 = 0;
VAR tokens AS ARR OF TOKEN_ = [];
VAR ch AS STR = "";

WHILE (LESS idx, (STRLEN source)) BEGIN
    IF (EQUAL source[idx], "(") BEGIN
        PUSHB tokens, (TOKEN.NEW TK_LPAREN);
    ELSEIF (EQUAL source[idx], ")") BEGIN
        PUSHB tokens, (TOKEN.NEW TK_RPAREN);
    END;
    
    INC idx;
END;